name: Android – Release (DEBUG VERBOSE)

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      APP_DIR: S2PASS-Android/S2PASS-Android
      KEYSTORE_PATH: S2PASS-Android/S2PASS-Android/release.keystore

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          fail=0
          [ -z "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ] && echo "❌ ANDROID_KEYSTORE_BASE64 missing" && fail=1
          [ -z "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" ] && echo "❌ ANDROID_KEYSTORE_PASSWORD missing" && fail=1
          [ -z "${{ secrets.ANDROID_KEY_ALIAS }}" ] && echo "❌ ANDROID_KEY_ALIAS missing" && fail=1
          [ -z "${{ secrets.ANDROID_KEY_PASSWORD }}" ] && echo "❌ ANDROID_KEY_PASSWORD missing" && fail=1
          exit $fail

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses & install platform/build-tools
        shell: bash
        run: |
          yes | sdkmanager --licenses >/dev/null
          # Adjust these if your app uses a different compileSdk / buildToolsVersion
          sdkmanager "platforms;android-34" "build-tools;34.0.0" >/dev/null
          sdkmanager --list | head -n 50 || true

      - name: Decode keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > "$KEYSTORE_PATH"
          ls -l "${KEYSTORE_PATH}" || exit 1

      - name: Write keystore.properties (CI only)
        run: |
          cat > "$APP_DIR/app/keystore.properties" <<'EOF'
          storeFile=../release.keystore
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          EOF
          echo "Wrote $APP_DIR/app/keystore.properties"

      - name: Show tree
        run: |
          echo "::group::Tree root"
          ls -la
          echo "::endgroup::"
          echo "::group::Tree app dir"
          ls -la "$APP_DIR"
          ls -la "$APP_DIR/app" || true
          echo "::endgroup::"

      - name: Ensure Gradle wrapper exists & is executable
        working-directory: ${{ env.APP_DIR }}
        run: |
          if [ ! -f gradlew ]; then
            echo "❌ gradlew not found in $PWD"
            ls -la
            exit 1
          fi

          ./gradlew -v
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
        with:
      gradle-version: 8.1


      - name: Print Android/Gradle environment
        working-directory: ${{ env.APP_DIR }}
        run: |
          echo "::group::Wrapper properties"
          cat gradle/wrapper/gradle-wrapper.properties || true
          echo "::endgroup::"
          echo "::group::Top-level build.gradle"
          cat build.gradle || true
          echo "::endgroup::"
          echo "::group::Settings.gradle"
          cat settings.gradle || true
          echo "::endgroup::"
          echo "::group::App build.gradle"
          cat app/build.gradle || true
          echo "::endgroup::"
          echo "::group::Gradle properties (if any)"
          cat gradle.properties || true
          echo "::endgroup::"

      - name: Warm up configuration (no build)
        working-directory: ${{ env.APP_DIR }}
        run: ./gradlew :app:tasks --stacktrace --info --no-daemon || true

      - name: Build Release APK (max logging)
        working-directory: ${{ env.APP_DIR }}
        run: ./gradlew assembleRelease --stacktrace --info --warning-mode all --no-daemon

      - name: Upload APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: ${{ env.APP_DIR }}/app/build/outputs/apk/release/*.apk
