name: Android â€“ Release (DEBUG VERBOSE)

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      APP_DIR: S2PASS-Android/S2PASS-Android
      KEYSTORE_PATH: S2PASS-Android/S2PASS-Android/release.keystore
      ANDROID_PLATFORM_PKG: platforms;android-34
      ANDROID_BUILD_TOOLS_PKG: build-tools;34.0.0

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        id: validate-secrets
        shell: bash
        run: |
          missing=0
          for k in ANDROID_KEYSTORE_BASE64 ANDROID_KEYSTORE_PASSWORD ANDROID_KEY_ALIAS ANDROID_KEY_PASSWORD; do
            if [ -z "${{ secrets[$k] }}" ]; then
              echo "::error title=Missing secret::$k"
              missing=1
            fi
          done
          echo "missing=$missing" >> "$GITHUB_OUTPUT"
          if [ "$missing" -ne 0 ]; then exit 1; fi

      - name: Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses (non-fatal)
        shell: bash
        run: |
          # Avoid failing when nothing needs accepting (SIGPIPE on `yes`)
          yes | sdkmanager --licenses >/dev/null || true

      - name: Ensure required SDK packages are installed
        shell: bash
        run: |
          SDK_ROOT="${ANDROID_SDK_ROOT:-${ANDROID_HOME:-$HOME/android-sdk}}"
          echo "Using ANDROID_SDK_ROOT=$SDK_ROOT"
          sdkmanager --sdk_root="$SDK_ROOT" \
            "${ANDROID_PLATFORM_PKG}" \
            "${ANDROID_BUILD_TOOLS_PKG}"
          echo "Installed packages (top of list):"
          sdkmanager --list | head -n 80 || true

      - name: Repo sanity + tree
        working-directory: ${{ env.APP_DIR }}
        shell: bash
        run: |
          echo "PWD=$(pwd)"
          echo "::group::Tree: repo root"; ls -la; echo "::endgroup::"
          echo "::group::Tree: app"; ls -la app || true; echo "::endgroup::"
          if [ ! -f ./gradlew ]; then
            echo "::error ::gradlew not found in $PWD"
            exit 1
          fi
          chmod +x ./gradlew
          ./gradlew --version

      - name: Decode keystore
        if: steps.validate-secrets.outputs.missing == '0'
        shell: bash
        run: |
          mkdir -p "$(dirname "$KEYSTORE_PATH")"
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > "$KEYSTORE_PATH"
          ls -l "$KEYSTORE_PATH"

      - name: Write keystore.properties (CI only)
        if: steps.validate-secrets.outputs.missing == '0'
        working-directory: ${{ env.APP_DIR }}/app
        shell: bash
        run: |
          cat > keystore.properties <<EOF
          storeFile=../release.keystore
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          EOF
          echo "keystore.properties:"
          sed 's/Password=.*/Password=***REDACTED***/' keystore.properties

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.1

      - name: List Gradle tasks
        working-directory: ${{ env.APP_DIR }}
        shell: bash
        run: ./gradlew tasks --no-daemon -q || true

      - name: Build debug and release (verbose)
        working-directory: ${{ env.APP_DIR }}
        shell: bash
        run: |
          # Build both; if one variant fails we'll still see logs for the other
          set -o pipefail
          ./gradlew assembleRelease assembleDebug --no-daemon --stacktrace --info --warning-mode all

      - name: Show produced outputs
        if: always()
        shell: bash
        run: |
          echo "::group::Outputs under app/build/outputs"
          find "${APP_DIR}/app/build/outputs" -maxdepth 4 -type f -print || true
          echo "::endgroup::"

      - name: Upload all APKs (debug + release)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: all-apks
          path: ${{ env.APP_DIR }}/app/build/outputs/apk/**/*.apk
          if-no-files-found: warn
